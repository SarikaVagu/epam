
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the roadsAndLibraries function below.

    static long dfs(int s, ArrayList<ArrayList<Integer>> list, boolean vis[],long nodes)
    {
        // add your code here
        // System.out.print(s+" ");
        vis[s]=true;
        int i,n=list.get(s).size();
        for(int i1 : list.get(s))
        {
            if(!vis[i1]){
                nodes=1+dfs(i1,list,vis,nodes);
            }
        }
        return nodes;
    }


    static long roadsAndLibraries(int n, int c_lib, int c_road, int[][] cities) {

        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        for(int i=0;i<n+1;i++)
            list.add(new ArrayList<Integer>());
        for(int i=0;i<cities.length;i++)
        {
            int p=cities[i][0];
            int q=cities[i][1];
            list.get(p).add(q);
            list.get(q).add(p);
        }
        int value;
        long cost=0;
        long nodes=0;
        boolean[] vis=new  boolean[n+1];
        for(int i=1;i<n+1;i++)
        {
            if(!vis[i])
            {
                // vis[i]=true;
                // System.out.println(i);
                nodes=1+dfs(i,list,vis,nodes);
                if((nodes*c_lib)<(((nodes-1)*c_road)+c_lib))
                {
                    cost+=nodes*c_lib;
                }
                else
                    cost+=(((nodes-1)*c_road)+c_lib);
                nodes=0;
                // System.out.print(cost+" "+nodes+" ");
            }
        }
        // System.out.println();
        return cost;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nmC_libC_road = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nmC_libC_road[0]);

            int m = Integer.parseInt(nmC_libC_road[1]);

            int c_lib = Integer.parseInt(nmC_libC_road[2]);

            int c_road = Integer.parseInt(nmC_libC_road[3]);

            int[][] cities = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] citiesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int citiesItem = Integer.parseInt(citiesRowItems[j]);
                    cities[i][j] = citiesItem;
                }
            }

            long result = roadsAndLibraries(n, c_lib, c_road, cities);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
